---
version: "3.7"
services:

  nginx:
    image: nginx
    container_name: ${NAMESPACE}_nginx
    restart: always
    ports:
    - 8080:80
    - 443:443
    links:
    - wordpress
    networks:
    - internal
    - web
    volumes:
    - ./nginx/conf.d:/etc/nginx/conf.d:ro
    - ./nginx/log:/var/log/nginx
    - app_data:/var/www/html/
    - letsencrypt_certs:/etc/nginx/ssl
    - letsencrypt_www:/var/www/letsencrypt

  traefik:
    image: traefik:latest
    networks:
    - internal
    - web
    container_name: ${NAMESPACE}_traefik
    ports:
    - "81:80"
    - "8085:8080"
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ./traefik.toml:/traefik.toml
    - ./acme.json:/acme.json

  wordpress:
    build: wordpress
    image: x0rzkov/wordpress:latest
    container_name: ${NAMESPACE}_wordpress
    restart: always
    links:
    - mysql
    - memcached
    networks:
    - internal
    - web
    volumes:
    - app_data:/var/www/html/
    environment:
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: password
      WORDPRESS_DB_NAME: wordpress
    labels:
      - "traefik.backend=${podName}-wordpress"
      - "traefik.frontend.rule=Host:${hostRule}"
      - "traefik.docker.network=${podName}_frontend"

  mysql:
    image: mariadb
    container_name: ${NAMESPACE}_mariadb
    restart: always
    ports :
    - "3306:3306"
    networks:
    - internal
    - web
    volumes:
    - db-data:/var/lib/mysql
    environment:
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password

  backup:
    image: zeenlym/mariadb-backup
    container_name: ${NAMESPACE}_backup
    depends_on:
    - mysql
    restart: unless-stopped
    networks:
    - internal
    - web
    labels:
    - "traefik.enable=false"
    environment:
    - TIMEZONE=${timeZone}
    - SCHEDULE=0 0 3 * *
    - BACKUP_METHOD=mysqldump
    - MYSQL_HOST=mysql
    - MYSQL_DATABASE=${dbName}
    - MYSQL_USER=${dbUser}
    - MYSQL_PASSWORD=${dbPass}
    volumes:
    - ./backup:/backup

  adminer:
    image: adminer
    container_name: ${NAMESPACE}_adminer
    restart: unless-stopped
    depends_on:
    - mysql
    networks:
    - internal
    - web
    environment:
    - ADMINER_DEFAULT_SERVER=mysql
    labels:
    - "traefik.backend=${podName}-adminer"
    - "traefik.frontend.rule=Host:${adminerHostRule}"
    - "traefik.docker.network=${podName}_frontend"

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: ${NAMESPACE}_pma
    restart: always
    ports :
    - "8082:80"
    links:
    - mysql:db
    networks:
    - internal
    - web
    environment:
    - PMA_ARBITRARY=1
    - PMA_PORT=3306
    - PMA_HOSTS=db
    - UPLOAD_LIMIT=65536536
    - MYSQL_ROOT_PASSWORD=password

  memcached:
    image: memcached
    container_name: ${NAMESPACE}_memcached 
    restart: always
    ports:
    - "11211:11211"
    networks:
    - internal

  varnish:
    image: million12/varnish
    container_name: ${NAMESPACE}_varnish 
    restart: always
    environment:
      CACHE_SIZE: 64m
    links:
    - nginx
    volumes:
    - ./varnish/default.vcl:/etc/varnish/default.vcl
    ports:
    - "80:80"
    networks:
    - internal

  cadvisor:
    image: google/cadvisor
    container_name: ${NAMESPACE}_cadvisor 
    ports:
    - "8081:8080"
    restart: always
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    networks:
    - internal
    - web

  mailhog:
    container_name: ${NAMESPACE}_mailhog
    image: mailhog/mailhog:latest
    ports:
    - ${MAILHOG_EXTERNAL_PORT}:8025
    networks:
    - internal
    - web

  letsencrypt:
    container_name: ${NAMESPACE}_letsencrypt
    build:
      context: ./.docker/letsencrypt
      args:
        WORDPRESS_URI: ${WORDPRESS_URI}
    image: ${NAMESPACE}/letsencrypt
    volumes:
    - letsencrypt_certs:/etc/nginx/ssl
    - letsencrypt_www:/var/www/letsencrypt
    networks:
    - internal
    command: /bin/true

networks:
  internal:
  web:
    external: true

volumes:
  db-data:
  letsencrypt_certs:
  letsencrypt_www:
  elastic_data:
  app_data:
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/www